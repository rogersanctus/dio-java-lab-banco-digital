@startuml
/'
Diagrama de classes em PlantUML: https://plantuml.com/starting
'/

package bancodigital {
  interface conta.IConta {
    + {abstract} void abrirConta(double saldoInicial)
    + {abstract} void sacar(double valor)
    + {abstract} void depositar(double valor)
    + {abstract} void transferir(double valor, IConta contaDestino)
    + {abstract} double getSaldo()
    + {abstract} Cliente getCliente()
    + {abstract} String getSequencialConta()
    + {abstract} int getAgencia()
    + {abstract} void imprimirExtrato()
  }

  note left of conta.IConta::imprimirExtrato
  Implementado em ContaCorrente
  e ContaPoupan√ßa
  end note

  abstract class conta.Conta {
    # Banco banco
    # Cliente cliente
    # int agencia
    # String sequencialConta

    - {static} int AGENCIA_PADRAO = 1
    - {static} int SEQUENCIAL = 1

    + Conta(Banco banco, Cliente cliente)
    + Conta(Banco banco, Cliente cliente, double saldoInicial)

    + double getAgencia()
    # void imprimirInfosComuns()
  }

  class banco.ContaCorrente {
    ~ ContaCorrente(Banco banco, Cliente cliente)
  }

  class banco.ContaPoupanca {
    ~ ContaPoupanca(Banco banco, Cliente cliente)
  }

  enum conta.TipoConta {
    + POUPANCA
    + CORRENTE
  }

  class banco.Banco {
    - String nome
    - List<IConta> contas
    - Map<ChaveTransacao, ITransacao> transacoes
    - Map<String, Integer> sequencialTransacaoConta

    + Banco(String nome)
    + void abrirConta(TipoConta tipo, Cliente cliente)
    + void abrirConta(TipoConta tipo, Cliente cliente, double saldoInicial)
    + void adicionarTransacao(IConta conta, ITransacao transacao)
    + String getNome()
    + List<IConta> getContas()
    + double getSaldoConta(IConta conta)
    + double getSaldoTotal()
    + void imprimirDetalhesExtratoConta(IConta conta)
    - void adicionarConta(IConta conta)
    - void gerarChaveTransacao(OffsetDateTime dataHora, String sequencialConta)
    - Stream<Entry<ChaveTransacao, ITransacao>> getTransacoesConta(IConta conta)
    - double computarTransacoes(IConta conta, Stream<ITransacao> transacoes)
  }

  interface banco.ITransacao {
  }

  class banco.TransacaoAberturaConta {
    + TransacaoAberturaConta(double saldoInicial)
  }

  class banco.TransacaoSaque {
    + TransacaoSaque(double valor)
  }

  class banco.TransacaoDeposito {
    + TransacaoDeposito(double valor)
  }

  class banco.TransacaoTransferencia {
    + TransacaoTransferencia(IConta de, IConta para, double valor)
  }

  class banco.ChaveTransacao {
    + OffsetDateTime dateTime
    + String sequencialConta

    + ChaveTransacao(OffsetDateTime dateTime, String sequencialConta)
    + String sequencial()
  }

  class cliente.Cliente {
    + String nome
  }

  conta.Conta ..|> conta.IConta: implementa

  banco.Banco "1" ..o "*" conta.IConta: possui
  banco.Banco .. conta.TipoConta: cria conta por
  banco.Banco "1" .right.o "*" banco.ITransacao: possui
  banco.Banco .. banco.ChaveTransacao
  banco.Banco .. cliente.Cliente
  banco.Banco .. banco.ContaCorrente: abrirConta
  banco.Banco .. banco.ContaPoupanca: abrirConta

  banco.ContaPoupanca --|> conta.Conta: herda de
  banco.ContaCorrente --|> conta.Conta: herda de

  conta.Conta "*" .* "1" cliente.Cliente: possui

  banco.TransacaoAberturaConta ..|> banco.ITransacao
  banco.TransacaoSaque .down.|> banco.ITransacao
  banco.TransacaoDeposito .down.|> banco.ITransacao
  banco.TransacaoTransferencia .down.|> banco.ITransacao

  conta.Conta ..> banco.ITransacao: opera por
}
@enduml
